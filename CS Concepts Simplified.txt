1 Big O Notation

Say you order Harry Potter: Complete 8-Film Collection from Amazon and download the same film collection online at the same time. 
You want to test which method is faster. 
The delivery takes almost a day to arrive and the download completed about 30 minutes earlier. 
Great ! So it’s a tight race.
What if I order several Blu-ray movies like The Lord of the Rings, Twilight, The Dark Knight Trilogy, etc. and download all the movies online at the same time ? 
This time, the delivery still take a day to complete, but the online download takes 3 days to finish.
For online shopping, the number of purchased item (input) doesn’t affect the delivery time. The output is constant. We call this O(1).
For online downloading, the download time is directly proportional to the movie file sizes (input). We call this O(n).
From the experiments, we know that online shopping scales better than online downloading. 
It is very important to understand big O notation because it helps you to analyze the scalability and efficiency of algorithms.
Big O notation represents the worst-case scenario of an algorithm. Let’s assume that O(1) and O(n) are the worst-case scenarios of the example above.

2 Recursion

Someone in a movie theater asks you what row you’re sitting in. 
You are too lazy to count, so you ask the person in front of you. 
You simply have to add 1 from the person’s answer to get your current row number. Brilliant right ? 
However, the person in front of you did exactly the same thing, and so on. 
Finally the question reaches row 1 and he answers: “I’m in row 1!”. 
From there, the correct message (incremented by one each row) will pass all the way up to the person who asked.

3 Big Data

Let’s assume you have a leak in a water pipe in your garden. 
You take a bucket and some sealing materials to fix the problem.
After a while, you see that the leak is much bigger that you need a plumber to bring bigger tools. 
In the meanwhile, you are still using the bucket to drain the water. 
After a while, you notice that a massive underground stream has opened. 
You need to handle gallons of water every second.
Buckets aren’t useful anymore. You need a completely new approach to solve the problem because the volume and velocity of water has grown. 
To prevent the town from flooding, you may need the government to build a massive dam that requires an enormous civil engineering expertise and a control system.
Big data describes data sets so large and complex that is impossible to manage with conventional data processing tools.

4 Greedy Algorithm

Imagine you are going for hiking and your goal is to reach the highest peak possible. 
You already have the map before you start, but there are thousands of possible paths shown on the map. 
You are too lazy and simply don’t have the time to evaluate each of them. Screw the map !
You started hiking with a simple strategy – be greedy and short-sighted. Just take paths that slope upwards the most.
After the trip ended and your whole body is sore and tired, you look at the hiking map for the first time. 
Oh my god ! There’s a muddy river that I should’ve crossed, instead of keep walking upwards.
A greedy algorithm picks the best immediate choice and never reconsiders its choices.

5 Hill Climbing

This time you’re climbing another hill. 
You’re determined to find the path that will lead you to the highest peak. 
However, there’s no map provided and it’s very foggy. 
To make your trips easier, you have downloaded a hiking app that track paths you’ve taken and measures your current altitude.
You climb the hill over and over again. 
Each time you take exact same path that leads you to the highest peak ever recorded but somewhere in the middle of your journey you choose a slightly different route.
You can also randomly choose a different starting point which is known as random-restart hill climbing. 
So that you don’t just linger around the same area and reduce your probability of getting stuck.
The hill climbing algorithm attempts to find a better solution by generating a neighboring solution. 
Each neighboring solution is generated based on the best solution so far, with a single element modified.

6 Simulated Annealing

It’s Mount Everest, the biggest challenge you’ve ever faced. 
Your goal is to reach the summit, but it’s impractical to climb Mount Everest over and over again. 
You have one chance. You are more cautious now. 
Instead of always climbing upwards, you occasionally move to a lower point and explore other paths, to reducing your chance of taking the wrong path. 
The higher you climb, the lower the probability you move to a lower point and explore.

7 Dynamic Programming

Dad: *Writes down “1+1+1+1+1+1+1+1 =” on a sheet of paper*
Dad: What’s that equal to?
Kid: *counting and 3 seconds later* Eight!
Dad: *Writes down another “+1” on the left*
Dad: What about now?
Kid: *instantly* Nine!
Dad: Wow, how did you calculate so fast?
Kid: You just added one more!
Dad: So you didn’t need to recount because you remembered it was eight before. Brilliant!
The example describes memoization (yes memoization not memorization :(), a top-down approach in dynamic programming which store results of previous computations

8 Concurrency

Let’s say you work as a secretary in company A.
You have to answer phone calls, arrange meetings, typing documents, etc. 
You always have to switch back and forth between your tasks based on priority. 
Every time the phone rings, you have to stop whatever task you are working on.
Concurrency is a property of programs and systems that allow tasks to run in overlapping time periods.

9 Parallelism

Eventually, you can’t cope with your job because there’s too much data entry tasks. 
You complain to your boss and he happily hires a data entry clerk to handle your data entry tasks.
Parallelism allows 2 or more tasks to run at the same time, provided that the machine has multiprocessing capability.

10 Deadlock

Boy: Let her approach me first.
Girl: Let him approach me first.
*And there dies a budding love story*

11 Social Engineering

A couple just moved in next door. 
They are really nice and helpful. 
They often invite you over for dinner. 
One day, you mentioned that you are going for a two-week vacation soon. 
They happily offered to take care of your dog. 
You left a spare key for them. 
Since then, you have not heard any news about them.
Social engineering is tricking users into revealing their private information.

12 Trojan Horse

A burglar pretends to be a plumber and you unlock the door for him. 
He fixes your leaking pipe and everything looks perfectly normal. 
After he left, you discovered that your jewelry is missing.
A trojan horse is malware program that pretends to be useful or helpful and runs malicious code in the background.

13 Rootkit

Your door lock is jammed and you call a locksmith. 
He fixes your door lock and secretly duplicates another key.
A rootkit gains administrator or root access of a computer then disguise as necessary files that is hard to detect by antivirus software.

14 Distributed Denial-of-service Attack (DDoS)

Imagine 100 people visit your little bookshop at the same time. 
Your bookshop is occupied and others can’t come in. 
You can’t ask any of them to leave because they don’t seem to be coming in groups. 
They probably don’t know each other at all. 
Most of them seem to be genuinely interested to buy books. 
Some even ask you where are the book shelved. 
Someone at the counter just pay you in pennies.
People keep coming in and out for hours. 
All of them look perfectly normal. 
At the end of the day, you’ve only made one book sale. 
Remember the guy who pay you in pennies ?
DDoS attempts to bring a site or service down by flooding it with visitors.

15 Programming

Writing very specific instructions to a dumb, yet obedient machine.
Imagine you have to teach a kid how to shower. 
The kid only knows how to follow your instructions. 
So you ask the kid to :-
1.Walk into the bathroom.
2.Turn on the shower.
3.Stand under the shower.
4.Take the soap.
5.And so on ...
Oh wait, The kid didn’t even remove his/her clothes before entering the shower !
That’s how computer works. 
You have to tell the computer what it exactly needs to do. 
It doesn’t know how to assume and never think about the consequences.

16 SQL vs NOSQL

NoSQL databases store information like you would recipes in a book. 
When you want to know how to make a cake, you go to that recipe, and all of the information about how to make that cake (ingredients, preparation, mixing, baking, finishing, etc.) are all on that one page.

SQL is like shopping for the ingredients for the recipe. 
In order to get all of your ingredients into your cart, you have to go to many different aisles to get each ingredient.
When you are done shopping, your grocery cart will be full of all the ingredients you had to run around and collect.

17 API

At restaurants, you order food (call API) from the menu (APIs). 
Once your food is ready (API response is ready), the waiter will serve you the food.
You ask for what you want and the system returns you a response, without exposing what’s happening behind the scene.





